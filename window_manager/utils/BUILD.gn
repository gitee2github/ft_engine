# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
config("libwmutil_private_config") {
  include_dirs = [
    "include",
    "//foundation/window/window_manager/dmserver/include",
    "../interfaces/innerkits/dm",
    "../interfaces/innerkits/wm",
  ]
}

config("libwmutil_public_config") {
  include_dirs = [
    "//foundation/window/window_manager/utils/include",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/event/include",
  ]
}

## Build libwmutil.so
ohos_shared_library("libwmutil") {
  sources = [
    "src/agent_death_recipient.cpp",
    "src/cutout_info.cpp",
    "src/display_info.cpp",
    "src/perform_reporter.cpp",
    "src/permission.cpp",
    "src/screen_group_info.cpp",
    "src/screen_info.cpp",
    "src/screenshot_info.cpp",
    "src/singleton_container.cpp",
    "src/string_util.cpp",
    "src/surface_draw.cpp",
    "src/surface_reader.cpp",
    "src/surface_reader_handler_impl.cpp",
    "src/sys_cap_util.cpp",
    "src/window_property.cpp",
    "src/window_transition_info.cpp",
    "src/wm_math.cpp",
    "src/wm_occlusion_region.cpp",
    "src/xml_config_base.cpp",
  ]

  configs = [
    ":libwmutil_private_config",
    "//foundation/window/window_manager/resources/config/build:coverage_flags",
  ]

  public_configs = [ ":libwmutil_public_config" ]

  deps = [
    "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics:2d_graphics",
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
  ]

  external_deps = [
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "graphic_standard:surface",
    "hilog_native:libhilog",
    "hisysevent_native:libhisysevent",
    "input:libmmi-client",
    "ipc:ipc_core",
    "multimedia_image_framework:image_native",
    "samgr:samgr_proxy",
  ]
  part_name = "window_manager"
  subsystem_name = "window"
}

group("test") {
  testonly = true
  deps = [ "test:test" ]
}
