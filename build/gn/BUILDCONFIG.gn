# Copyright 2013 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# =============================================================================
# WHAT IS THIS FILE?
# =============================================================================
#
# This is the master GN build configuration. This file is loaded after the
# build args (args.gn) for the build directory and after the toplevel ".gn"
# file (which points to this file as the build configuration).
#
# This file will be executed and the resulting context will be used to execute
# every other file in the build. So variables declared here (that don't start
# with an underscore) will be implicitly global.

print("[GN INFO] host_os :", host_os)
print("[GN INFO] host_cpu :", host_cpu)

if (host_os != "linux") {
  assert(false, "[GN ERROR] Unsupported os: ", host_os)
}

if (target_os == "") {
  target_os = host_os
} else {
  print("[GN INFO] target_os :", target_os)
}

if (target_cpu == "") {
  target_cpu = host_cpu
} else {
  print("[GN INFO] target_cpu :", target_cpu)
}

if (current_os == "") {
  current_os = target_os
} else {
  print("[GN INFO] current_os :", current_os)
}

if (current_cpu == "") {
  current_cpu = target_cpu
} else {
  print("[GN INFO] current_cpu :", current_cpu)
}

declare_args() {
  # We add this parameter to speed up link process, enable_lto_O0 default is false.
  enable_lto_O0 = false

  # Whether we're a traditional desktop unix.
  is_desktop_linux = current_os == "linux"

  # Set to true when compiling with the Clang compiler
  is_clang = current_os != "linux" ||
             (current_cpu != "s390x" && current_cpu != "s390" &&
              current_cpu != "ppc64" && current_cpu != "ppc" &&
              current_cpu != "mips" && current_cpu != "mips64")

  # Allows the path to a custom target toolchain to be injected as a single
  # argument, and set as the default toolchain.
  custom_toolchain = ""

  # This should not normally be set as a build argument.  It's here so that
  # every toolchain can pass through the "global" value via toolchain_args().
  host_toolchain = ""

  use_musl = false
  use_musl_oh = false
}

if (use_musl_oh == true) {
  assert(use_musl, "[GN ERROR] use_musl_oh = true, but use_musl = false")
}

declare_args() {
  # Debug build. Enabling official builds automatically sets is_debug to false.
  is_debug = true

  # Full Debug mode. Setting optimize level to "-O0" and symbol level to "-g3".
  # It should be used with "is_debug"
  # It's set to false On OpenHarmony. 
  ft_full_debug = true
}

declare_args() {
  project_root_dir = ""
}

# ==============================================================================
# TOOLCHAIN SETUP
# ==============================================================================
#
# Here we set the default toolchain, as well as the variable host_toolchain
# which will identify the toolchain corresponding to the local system when
# doing cross-compiles. When not cross-compiling, this will be the same as the
# default toolchain.
#
# We do this before anything else to make sure we complain about any
# unsupported os/cpu combinations as early as possible.

if (host_toolchain == "") {
  # This should only happen in the top-level context.
  # In a specific toolchain context, the toolchain_args()
  # block should have propagated a value down.
  if (host_os == "linux") {
    if (is_clang) {
      host_toolchain = "//build/gn/toolchain/linux:clang_$host_cpu"
    } else {
      host_toolchain = "//build/gn/toolchain/linux:$host_cpu"
    }
  } else {
    assert(false, "[GN ERROR] Unsupported host_os: $host_os")
  }
}

if (target_os == "linux") {
  if (is_clang) {
    _default_toolchain = "//build/gn/toolchain/linux:clang_$target_cpu"
  } else {
    assert(false,
           "[GN ERROR] Unsupported all compilers except clang currently.")
    # _default_toolchain = "//build/gn/toolchain/linux:gcc_$target_cpu"
  }
} else {
  assert(false, "[GN ERROR] Unsupported target_os: $target_os")
}

# If a custom toolchain has been set in the args, set it as default. Otherwise,
# set the default toolchain for the platform (if any).
if (custom_toolchain != "") {
  set_default_toolchain(custom_toolchain)
} else if (_default_toolchain != "") {
  set_default_toolchain(_default_toolchain)
}

# =============================================================================
# OS DEFINITIONS
# =============================================================================
#
# We set these various is_FOO booleans for convenience in writing OS-based
# conditions.
#
# - is_android, is_chromeos, is_ios, and is_win should be obvious.
# - is_mac is set only for desktop Mac. It is not set on iOS.
# - is_posix is true for mac and any Unix-like system (basically everything
#   except Fuchsia and Windows).
# - is_linux is true for desktop Linux, but not for ChromeOS nor Android (which
#   is generally too different despite being based on the Linux kernel).
#
# Do not add more is_* variants here for random lesser-used Unix systems like
# aix or one of the BSDs. If you need to check these, just check the
# current_os value directly.

is_linux = current_os == "linux"
is_ft = current_os == "linux"
is_android = current_os == "android"
is_ios = current_os == "ios"
is_mac = current_os == "mac"
is_win = current_os == "win" || current_os == "winuwp"

is_apple = is_ios || is_mac

# =============================================================================
# SOURCES FILTERS
# =============================================================================
#
# These patterns filter out platform-specific files when assigning to the
# sources variable. The magic variable |sources_assignment_filter| is applied
# to each assignment or appending to the sources variable and matches are
# automatically removed.
#
# Note that the patterns are NOT regular expressions. Only "*" and "\b" (path
# boundary = end of string or slash) are supported, and the entire string
# must match the pattern (so you need "*.cc" to match all .cc files, for
# example).

# DO NOT ADD MORE PATTERNS TO THIS LIST, see set_sources_assignment_filter call
# below.
sources_assignment_filter = []

if (!is_win) {
  sources_assignment_filter += [
    "*_win.cc",
    "*_win.h",
    "*_win_unittest.cc",
    "*\bwin/*",
    "*.def",
  ]
}
if (!is_mac) {
  sources_assignment_filter += [
    "*_mac.h",
    "*_mac.cc",
    "*_mac.mm",
    "*_mac_unittest.h",
    "*_mac_unittest.cc",
    "*_mac_unittest.mm",
    "*\bmac/*",
    "*_cocoa.h",
    "*_cocoa.cc",
    "*_cocoa.mm",
    "*_cocoa_unittest.h",
    "*_cocoa_unittest.cc",
    "*_cocoa_unittest.mm",
    "*\bcocoa/*",
  ]
}
if (!is_linux && !is_ft) {
  sources_assignment_filter += [
    "*_linux.h",
    "*_linux.cc",
    "*_linux_unittest.h",
    "*_linux_unittest.cc",
    "*\blinux/*",
  ]
}
if (!is_ft) {
  sources_assignment_filter += []
}

# set_sources_assignment_filter(sources_assignment_filter)

# =============================================================================
# TARGET DEFAULTS
# =============================================================================
#
# Set up the default configuration for every build target of the given type.
# The values configured here will be automatically set on the scope of the
# corresponding target. Target definitions can add or remove to the settings
# here as needed.
#
# WHAT GOES HERE?
#
# Other than the main compiler and linker configs, the only reason for a config
# to be in this list is if some targets need to explicitly override that config
# by removing it. This is how targets opt-out of flags. If you don't have that
# requirement and just need to add a config everywhere, reference it as a
# sub-config of an existing one, most commonly the main "compiler" one.

# Holds all configs used for running the compiler.
default_compiler_configs = [ 
  "//build/gn/configs/compiler:compiler",
  "//build/gn/configs/compiler:runtime_library",
  # Default Optimization level
  "//build/gn/configs/compiler:default_optimization",
  "//build/gn/configs/compiler:default_stack_frames",
  # Default Symbol level
  "//build/gn/configs/compiler:default_symbols",
  "//build/gn/configs/compiler:no_common",
  # Default Warnings
  "//build/gn/configs/compiler:chromium_code_warnings",
  # Other
  "//build/gn/configs/compiler:export_dynamic",
  "//build/gn/configs/compiler:no_exceptions",
  "//build/gn/configs/compiler:no_rtti",
  "//build/gn/configs/compiler:thin_archive",
]

# Debug/release-related defines.
if (is_debug) {
  default_compiler_configs += [ "//build/gn/configs:debug" ]
} else {
  default_compiler_configs += [ "//build/gn/configs:release" ]
}

# Static libraries and source sets use only the compiler ones.
set_defaults("static_library") {
  configs = default_compiler_configs
}
set_defaults("source_set") {
  configs = default_compiler_configs
}

# Executable defaults.
default_executable_configs = default_compiler_configs + [
  "//build/gn/configs:default_libs",
  "//build/gn/configs:executable_config"
]

set_defaults("executable") {
  configs = default_executable_configs
}

# Shared library and loadable module defaults (also for components in component mode).
default_shared_library_configs = default_compiler_configs + [
  "//build/gn/configs:default_libs",
  "//build/gn/configs:shared_library_config"
]

set_defaults("shared_library") {
  configs = default_shared_library_configs
}
