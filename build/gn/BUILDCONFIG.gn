# Copyright (c) 2023 Huawei Technologies Co., Ltd. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

print("[GN INFO] host_os :", host_os)
print("[GN INFO] host_cpu :", host_cpu)

if (target_os == "") {
  target_os = host_os
} else {
  print("[GN INFO] target_os :", target_os)
}

if (host_os != "linux" || target_os != "linux") {
  assert(false, "[GN ERROR] current only supported linux os")
}

if (target_cpu == "") {
  target_cpu = host_cpu
} else {
  print("[GN INFO] target_cpu :", target_cpu)
}

if (current_os == "") {
  current_os = target_os
} else {
  print("[GN INFO] current_os :", current_os)
}

if (current_cpu == "") {
  current_cpu = target_cpu
} else {
  print("[GN INFO] current_cpu :", current_cpu)
}

declare_args() {
  # We add this parameter to speed up link process, enable_lto_O0 default is false.
  enable_lto_O0 = false

  # Set to true when compiling with the Clang compiler
  is_clang = true

  # Allows the path to a custom target toolchain to be injected as a single
  # argument, and set as the default toolchain.
  custom_toolchain = ""

  # This should not normally be set as a build argument.  It's here so that
  # every toolchain can pass through the "global" value via toolchain_args().
  host_toolchain = ""

  use_musl = false
  use_musl_oh = false

  # Debug build. Enabling official builds automatically sets is_debug to false.
  is_debug = true
  ft_full_debug = true

  project_root_dir = ""

  is_ft_build = current_os == "linux"
}

if (use_musl_oh == true) {
  assert(use_musl, "[GN ERROR] use_musl_oh = true, but use_musl = false")
}

# TOOLCHAIN SETUP
if (host_toolchain == "") {
  if (is_clang) {
    host_toolchain = "//build/gn/toolchain/linux:clang_$host_cpu"
  } else {
    host_toolchain = "//build/gn/toolchain/linux:$host_cpu"
  }
}

if (is_clang) {
  _default_toolchain = "//build/gn/toolchain/linux:clang_$target_cpu"
} else {
  assert(false,
       "[GN ERROR] Unsupported all compilers except clang currently.")
  # _default_toolchain = "//build/gn/toolchain/linux:gcc_$target_cpu"
}

if (_default_toolchain != "") {
  set_default_toolchain(_default_toolchain)
}

# TARGET DEFAULTS CONFIGS
default_compiler_configs = [ 
  "//build/gn/configs/compiler:compiler",
  "//build/gn/configs/compiler:runtime_library",
  # Default Optimization level
  "//build/gn/configs/compiler:default_optimization",
  "//build/gn/configs/compiler:default_stack_frames",
  # Default Symbol level
  "//build/gn/configs/compiler:default_symbols",
  "//build/gn/configs/compiler:no_common",
  # Other
  "//build/gn/configs/compiler:export_dynamic",
  "//build/gn/configs/compiler:no_exceptions",
  "//build/gn/configs/compiler:no_rtti",
  "//build/gn/configs/compiler:thin_archive",
]

# Debug/release-related defines.
if (is_debug) {
  default_compiler_configs += [ "//build/gn/configs:debug" ]
} else {
  default_compiler_configs += [ "//build/gn/configs:release" ]
}

# Static libraries and source sets use only the compiler ones.
set_defaults("static_library") {
  configs = default_compiler_configs
}
set_defaults("source_set") {
  configs = default_compiler_configs
}

# Executable defaults.
default_executable_configs = default_compiler_configs + [
  "//build/gn/configs:default_libs",
  "//build/gn/configs:executable_config"
]

set_defaults("executable") {
  configs = default_executable_configs
}

# Shared library and loadable module defaults (also for components in component mode).
default_shared_library_configs = default_compiler_configs + [
  "//build/gn/configs:default_libs",
  "//build/gn/configs:shared_library_config"
]

set_defaults("shared_library") {
  configs = default_shared_library_configs
}
