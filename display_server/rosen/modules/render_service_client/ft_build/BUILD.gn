# Copyright (c) 2021-2023 Huawei Technologies Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/gn/fangtian.gni")
import("//display_server/ft_configs/ds_config.gni")

config("render_service_client_config") {
  include_dirs = [
    "$rosen_root/modules",
    "$rosen_root/modules/render_service_client/core",
    "$rosen_root/modules/render_service_base/include",
    "$rosen_root/modules/render_service_base/src/platform/fangtian/include",
    "$rosen_root/modules/platform/image_native",
    "$display_server_root/interfaces/inner_api/common",
    "$display_server_root/interfaces/inner_api/surface",
    "$display_server_root/interfaces/inner_api/composer",
  ]
  defines = [ "ROSEN_OHOS" ]
}

ft_source_set("render_service_client_src") {
  defines = []
  defines += gpu_defines
  defines += [ "MODULE_RSC" ]
  include_dirs = [
    "$rosen_root/modules/2d_graphics/src",
    "$rosen_root/modules/render_frame_trace/include",
    "$rosen_root/modules/render_service_base/src",
    "$display_server_root/utils/log",
    "$display_server_root/utils/sandbox",
  ]

  sources = [
    #animation
    "../core/animation/rs_animation.cpp",
    "../core/animation/rs_animation_callback.cpp",
    "../core/animation/rs_animation_group.cpp",
    "../core/animation/rs_animation_manager_map.cpp",
    "../core/animation/rs_animation_timing_curve.cpp",
    "../core/animation/rs_curve_animation.cpp",
    "../core/animation/rs_implicit_animation_param.cpp",
    "../core/animation/rs_implicit_animator.cpp",
    "../core/animation/rs_implicit_animator_map.cpp",
    "../core/animation/rs_keyframe_animation.cpp",
    "../core/animation/rs_path_animation.cpp",
    "../core/animation/rs_property_animation.cpp",
    "../core/animation/rs_spring_animation.cpp",
    "../core/animation/rs_transition.cpp",
    "../core/animation/rs_ui_animation_manager.cpp",

    #modifier
    "../core/modifier/rs_extended_modifier.cpp",
    "../core/modifier/rs_modifier_extractor.cpp",
    "../core/modifier/rs_modifier_manager.cpp",
    "../core/modifier/rs_property.cpp",
    "../core/modifier/rs_property_modifier.cpp",

    #jank_detector
    "../core/jank_detector/rs_jank_detector.cpp",

    #pipeline
    "../core/pipeline/rs_node_map.cpp",
    "../core/pipeline/rs_render_thread.cpp",
    "../core/pipeline/rs_render_thread_visitor.cpp",

    #transaction
    "../core/transaction/rs_application_agent_impl.cpp",
    "../core/transaction/rs_interfaces.cpp",
    "../core/transaction/rs_render_thread_client.cpp",
    "../core/transaction/rs_transaction.cpp",

    #ui
    "../core/ui/rs_base_node.cpp",
    "../core/ui/rs_canvas_node.cpp",
    "../core/ui/rs_display_node.cpp",
    "../core/ui/rs_node.cpp",
    "../core/ui/rs_pixel_map_util.cpp",
    "../core/ui/rs_proxy_node.cpp",
    "../core/ui/rs_root_node.cpp",
    "../core/ui/rs_surface_extractor.cpp",
    "../core/ui/rs_surface_node.cpp",
    "../core/ui/rs_ui_director.cpp",
    "../core/ui/rs_ui_share_context.cpp",
  ]

  cflags = [
    "-Wall",
    "-Wno-pointer-arith",
    "-Wno-non-virtual-dtor",
    "-Wno-missing-field-initializers",
    "-Wno-c++11-narrowing",
    "-fvisibility=hidden",
  ]

  cflags_cc = [
    "-std=c++17",
    "-fvisibility-inlines-hidden",
  ]

  deps = [
    "$rosen_root/modules/composer/vsync/ft_build:libvsync",
    "$rosen_root/modules/frame_analyzer/ft_build:libframe_analyzer",
    "$rosen_root/modules/render_frame_trace/ft_build:render_frame_trace",
    "$rosen_root/modules/render_service_base/ft_build:librender_service_base",
    "$display_server_root/utils/buffer_handle/ft_build:buffer_handle",
    "$display_server_root/utils/sync_fence/ft_build:sync_fence",
    "$display_server_root/utils/sandbox/ft_build:sandbox_utils",
  ]

  public_configs = [ ":render_service_client_config" ]

  configs = [
    "//build/gn/configs/system_libs:eventhandler_config",
    "//build/gn/configs/system_libs:ipc_core_config",
    "//build/gn/configs/system_libs:c_utils_config",
    "//build/gn/configs/system_libs:skia_config",
    "//build/gn/configs/system_libs:hitrace_meter_config",
  ]
}

ft_shared_library("librender_service_client") {
  public_deps = [
    ":render_service_client_src",
  ]
}
