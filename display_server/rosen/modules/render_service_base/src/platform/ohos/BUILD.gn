# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/graphic/graphic_2d/graphic_config.gni")
import("../../../config.gni")

group("ohos") {
  public_deps = [ ":rosen_ohos_sources" ]
}

config("export_config") {
  include_dirs = [
    "//foundation/graphic/graphic_2d/rosen/include",
    "//foundation/graphic/graphic_2d/rosen/modules/composer/vsync/include",
    "//commonlibrary/c_utils/base/include",
    "//utils/system/safwk/native/include",
    "//foundation/graphic/graphic_2d/frameworks/surface/src",
    "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/src",
    "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/include",
    "//foundation/multimedia/image_framework/interfaces/innerkits/include",
  ]
}

ohos_source_set("rosen_ohos_sources") {
  public_configs = [ ":export_config" ]

  defines = [ "ROSEN_OHOS" ]
  defines += gpu_defines

  sources = [
    #backend
    "backend/rs_surface_frame_ohos_raster.cpp",
    "backend/rs_surface_ohos_raster.cpp",
    "rs_accessibility.cpp",
    "rs_ashmem_helper.cpp",

    #overdraw
    "overdraw/rs_cpu_overdraw_canvas_listener.cpp",
    "overdraw/rs_gpu_overdraw_canvas_listener.cpp",
    "overdraw/rs_listened_canvas.cpp",
    "overdraw/rs_overdraw_controller.cpp",
    "rs_event_detector.cpp",
    "rs_event_manager.cpp",
    "rs_frame_report.cpp",
    "rs_innovation.cpp",
    "rs_log.cpp",
    "rs_marshalling_helper.cpp",
    "rs_render_service_client.cpp",
    "rs_render_service_connect_hub.cpp",
    "rs_render_service_connection_proxy.cpp",
    "rs_render_service_proxy.cpp",
    "rs_surface_frame_ohos.cpp",
    "rs_surface_ohos.cpp",
    "rs_surface_ohos_converter.cpp",
    "rs_system_properties.cpp",
    "rs_vsync_client_ohos.cpp",
  ]

  if (ace_enable_gpu) {
    sources += [
      "backend/rs_surface_frame_ohos_gl.cpp",
      "backend/rs_surface_ohos_gl.cpp",
    ]

    sources += [
      "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/src/render_context/cache_data.cpp",
      "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/src/render_context/memory_handler.cpp",
      "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/src/render_context/render_context.cpp",
      "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/src/render_context/shader_cache.cpp",
    ]
  }

  include_dirs = [
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_base/include",
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_base/src",
    "//commonlibrary/c_utils/base/include",
    "//utils/system/safwk/native/include",
    "//foundation/graphic/graphic_2d/prebuilts/librarys/gpu/include",
    "//drivers/peripheral/display/interfaces/include/",
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client/core",
    "//foundation/graphic/graphic_2d/utils/log",
  ]

  deps =
      [ "$accessibility_root/interfaces/innerkits/acfwk:accessibilityconfig" ]

  public_deps = [
    "//commonlibrary/c_utils/base:utils",
    "//foundation/graphic/graphic_2d:libsurface",
    "//foundation/graphic/graphic_2d/rosen/modules/composer/vsync:libvsync",
    "//foundation/graphic/graphic_2d/utils:sync_fence",
    "//foundation/multimedia/image_framework/interfaces/innerkits:image_native",
    "//third_party/flutter/build/skia:ace_skia_ohos",
  ]

  if (rs_enable_gpu) {
    include_dirs += [ "//third_party/openssl/include" ]

    public_deps += [
      "//foundation/graphic/graphic_2d:libgl",
      "//third_party/openssl:libcrypto_shared",
    ]
  }

  external_deps = [
    "eventhandler:libeventhandler",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]

  if (defined(graphic_2d_ext_configs.vendor_root)) {
    sources -= [
      "backend/rs_surface_ohos_gl.cpp",
      "rs_render_service_client.cpp",
      "rs_render_service_connect_hub.cpp",
    ]

    include_dirs += graphic_2d_ext_configs.librender_service_base_platform_ohos_ext_include_dirs

    sources +=
        graphic_2d_ext_configs.librender_service_base_platform_ohos_ext_sources

    if (ace_enable_gpu && is_emulator) {
      sources -= [ "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/src/render_context/render_context.cpp" ]

      sources +=
          graphic_2d_ext_configs.librender_service_base_2d_graphics_ext_sources
    }
  }
}
